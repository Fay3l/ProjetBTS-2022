//public PlotModel CourbeCO()
        //{
        //    double Double_CO_value = 0;
        //    var plot = new PlotModel();
        //    try
        //    {
        //        plot = new PlotModel
        //        {
        //            Title = "CO"
        //        };     
        //        var lineSerie = new LineSeries
        //        {
        //            Color = OxyColor.FromRgb(249, 255, 43) 
        //        };
        //        plot.Annotations.Add(new LineAnnotation
        //        {
        //            TextHorizontalAlignment = OxyPlot.HorizontalAlignment.Center
        //        });
        //        var startDate = Datamodels.Where(x => x.sensor == "CO").Select(x => x.timestamp).First();
        //        var endDate = Datamodels.Where(x => x.sensor == "CO").Select(x => x.timestamp).Last();
        //        var minValue = DateTimeAxis.ToDouble(endDate);
        //        var maxValue = DateTimeAxis.ToDouble(startDate);
        //        plot.Axes.Add(new DateTimeAxis
        //        {
        //            Position = AxisPosition.Bottom,
        //            Minimum = minValue,
        //            Maximum = maxValue,
        //            StringFormat = "d/M/yy ",
        //        });
                
        //        List<DataPoint> dataPoints = new List<DataPoint>();
                
        //        foreach (var CO in Datamodels)
        //        {
        //            if (CO.sensor == "CO")
        //            {
        //                var CO_value = CO.value;
        //                var CO_time = CO.timestamp;

        //                if (!double.TryParse(CO_value, out Double_CO_value))
        //                {
        //                    Double_CO_value = double.Parse(CO_value, System.Globalization.CultureInfo.InvariantCulture );
        //                    dataPoints.Add(new DataPoint(DateTimeAxis.ToDouble(CO_time), Double_CO_value));
        //                }

        //            }

        //        }
        //        lineSerie.ItemsSource = dataPoints;
        //        plot.Series.Add(lineSerie);

        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message, "PlotModel Error");
        //    }
        //    return plot;

        //}
        
        //public PlotModel CourbeCO2()
        //{
        //    double Double_CO2_value = 0;
        //    var plot = new PlotModel();
        //    try
        //    {
        //        plot = new PlotModel
        //        {
        //            Title = "CO2"
        //        };
                
        //        var lineSerie = new LineSeries();
        //        List<DataPoint> dataPoints = new List<DataPoint>();
        //        foreach (var CO2 in Datamodels)
        //        {
        //            if (CO2.sensor == "CO2")
        //            {
        //                var CO2_value = CO2.value;
        //                var CO2_time = CO2.timestamp;

        //                if (!double.TryParse(CO2_value, out Double_CO2_value))
        //                {
        //                    Double_CO2_value = double.Parse(CO2_value, System.Globalization.CultureInfo.InvariantCulture);
        //                    dataPoints.Add(new DataPoint(DateTimeAxis.ToDouble(CO2_time), Double_CO2_value));
        //                }

        //            }

        //        }
        //        lineSerie.ItemsSource = dataPoints;

        //        var startDate = Datamodels.Where(x => x.sensor == "CO2").Select(x => x.timestamp).First();
        //        var endDate = Datamodels.Where(x => x.sensor == "CO2").Select(x => x.timestamp).Last();
        //        var minValue = DateTimeAxis.ToDouble(endDate);
        //        var maxValue = DateTimeAxis.ToDouble (startDate);
        //        plot.Axes.Add(new DateTimeAxis { Position = AxisPosition.Bottom, Minimum = minValue, Maximum = maxValue, StringFormat = "d/M/yy " });
                

        //        plot.Series.Add(lineSerie);

        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message, "PlotModel Error");
        //    }
        //    return plot;
        //}

        //public PlotModel CourbeLUX()
        //{
        //     double Double_LUX_value = 0;
        //    var plot = new PlotModel();
        //    try
        //    {
        //        plot = new PlotModel
        //        {
        //            Title = "LUX"
        //        };
                
        //        var lineSerie = new LineSeries();
        //        List<DataPoint> dataPoints = new List<DataPoint>();
        //        foreach (var LUX in Datamodels)
        //        {
        //            if (LUX.sensor == "LUX")
        //            {
        //                var LUX_value = LUX.value;
        //                var LUX_time = LUX.timestamp;
        //                    Double_LUX_value = double.Parse(LUX_value, System.Globalization.CultureInfo.InvariantCulture);
        //                    dataPoints.Add(new DataPoint(DateTimeAxis.ToDouble(LUX_time), Double_LUX_value));
                        

        //            }

        //        }
        //        lineSerie.ItemsSource = dataPoints;

        //        var startDate = Datamodels.Where(x => x.sensor == "LUX").Select(x => x.timestamp).First();
        //        var endDate = Datamodels.Where(x => x.sensor == "LUX").Select(x => x.timestamp).Last();
        //        var minValue = DateTimeAxis.ToDouble(endDate);
        //        var maxValue = DateTimeAxis.ToDouble(startDate);
        //        plot.Axes.Add(new DateTimeAxis { Position = AxisPosition.Bottom, Minimum = minValue, Maximum = maxValue, StringFormat = "d/M/yy " });


        //        plot.Series.Add(lineSerie);

        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message, "PlotModel Error");
        //    }
        //    return plot;
        //}

        //public PlotModel CourbeTEM()
        //{
        //    double Double_TC_value = 0;
        //    var plot = new PlotModel();
        //    try
        //    {
        //        plot = new PlotModel
        //        {
        //            Title = "TC"
        //        };
                
        //        var lineSerie = new LineSeries();
        //        List<DataPoint> dataPoints = new List<DataPoint>();
        //        foreach (var TC in Datamodels)
        //        {
        //            if (TC.sensor == "TC")
        //            {
        //                var TC_value = TC.value;
        //                var TC_time = TC.timestamp;

        //                if (!double.TryParse(TC_value, out Double_TC_value))
        //                {
        //                    Double_TC_value = double.Parse(TC_value, System.Globalization.CultureInfo.InvariantCulture);
        //                    dataPoints.Add(new DataPoint(DateTimeAxis.ToDouble(TC_time), Double_TC_value));
        //                }

        //            }

        //        }
        //        lineSerie.ItemsSource = dataPoints;

        //        var startDate = Datamodels.Where(x => x.sensor == "TC").Select(x => x.timestamp).First();
        //        var endDate = Datamodels.Where(x => x.sensor == "TC").Select(x => x.timestamp).Last();
        //        var minValue = DateTimeAxis.ToDouble(endDate);
        //        var maxValue = DateTimeAxis.ToDouble(startDate);
        //        plot.Axes.Add(new DateTimeAxis { Position = AxisPosition.Bottom, Minimum = minValue, Maximum = maxValue, StringFormat = "d/M/yy " });


        //        plot.Series.Add(lineSerie);

        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message, "PlotModel Error");
        //    }
        //    return plot;
        //}

        //public PlotModel CourbeLP()
        //{
        //    double Double_LP_value = 0;
        //    var plot = new PlotModel();
        //    try
        //    {
        //        plot = new PlotModel
        //        {
        //            Title = "LP"
        //        };
        //        var lineSerie = new LineSeries();
        //        List<DataPoint> dataPoints = new List<DataPoint>();
        //        foreach (var LP in Datamodels)
        //        {
        //            if (LP.sensor == "LP")
        //            {
        //                var LP_value = LP.value;
        //                var LP_time = LP.timestamp;

        //                if (!double.TryParse(LP_value, out Double_LP_value))
        //                {
        //                    Double_LP_value = double.Parse(LP_value, System.Globalization.CultureInfo.InvariantCulture);
        //                    dataPoints.Add(new DataPoint(DateTimeAxis.ToDouble(LP_time), Double_LP_value));
        //                }

        //            }

        //        }
        //        lineSerie.ItemsSource = dataPoints;

        //        var startDate = Datamodels.Where(x => x.sensor == "LP").Select(x => x.timestamp).First();
        //        var endDate = Datamodels.Where(x => x.sensor == "LP").Select(x => x.timestamp).Last();
        //        var minValue = DateTimeAxis.ToDouble(endDate);
        //        var maxValue = DateTimeAxis.ToDouble(startDate);
        //        plot.Axes.Add(new DateTimeAxis { Position = AxisPosition.Bottom, Minimum = minValue, Maximum = maxValue, StringFormat = "d/M/yy " });


        //        plot.Series.Add(lineSerie);

        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message, "PlotModel Error");
        //    }
        //    return plot;
        //}

        //public PlotModel CourbeHUM()
        //{
        //    double Double_HUM_value = 0;
        //    var plot = new PlotModel();
        //    try
        //    {
        //        plot = new PlotModel
        //        {
        //            Title = "HUM"
        //        };
                
        //        var lineSerie = new LineSeries();
        //        List<DataPoint> dataPoints = new List<DataPoint>();
        //        foreach (var HUM in Datamodels)
        //        {
        //            if (HUM.sensor == "HUM")
        //            {
        //                var HUM_value = HUM.value;
        //                var HUM_time = HUM.timestamp;

        //                if (!double.TryParse(HUM_value, out Double_HUM_value))
        //                {
        //                    Double_HUM_value = double.Parse(HUM_value, System.Globalization.CultureInfo.InvariantCulture);
        //                    dataPoints.Add(new DataPoint(DateTimeAxis.ToDouble(HUM_time), Double_HUM_value));
        //                }

        //            }

        //        }
        //        lineSerie.ItemsSource = dataPoints;

        //        var startDate = Datamodels.Where(x => x.sensor == "HUM").Select(x => x.timestamp).First();
        //        var endDate = Datamodels.Where(x => x.sensor == "HUM").Select(x => x.timestamp).Last();
        //        var minValue = DateTimeAxis.ToDouble(endDate);
        //        var maxValue = DateTimeAxis.ToDouble(startDate);
        //        plot.Axes.Add(new DateTimeAxis { Position = AxisPosition.Bottom, Minimum = minValue, Maximum = maxValue, StringFormat = "d/M/yy" });


        //        plot.Series.Add(lineSerie);

        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message, "PlotModel Error");
        //    }
        //    return plot;
        //}

        //public PlotModel CourbePRES()
        //{
        //    double Double_PRES_value = 0;
        //    var plot = new PlotModel();
        //    try
        //    {
        //        plot = new PlotModel
        //        {
        //            Title = "PRES"
        //        };
        //        var lineSerie = new LineSeries();
        //        List<DataPoint> dataPoints = new List<DataPoint>();
        //        foreach (var PRES in Datamodels)
        //        {
        //            if (PRES.sensor == "PRES")
        //            {
        //                var PRES_value = PRES.value;
        //                var PRES_time = PRES.timestamp;

        //                if (!double.TryParse(PRES_value, out Double_PRES_value))
        //                {
        //                    Double_PRES_value = double.Parse(PRES_value, System.Globalization.CultureInfo.InvariantCulture);
        //                    dataPoints.Add(new DataPoint(DateTimeAxis.ToDouble(PRES_time), Double_PRES_value));
        //                }

        //            }

        //        }
        //        lineSerie.ItemsSource = dataPoints;

        //        var startDate = Datamodels.Where(x => x.sensor == "PRES").Select(x => x.timestamp).First();
        //        var endDate = Datamodels.Where(x => x.sensor == "PRES").Select(x => x.timestamp).Last();
        //        var minValue = DateTimeAxis.ToDouble(endDate);
        //        var maxValue = DateTimeAxis.ToDouble(startDate);
        //        plot.Axes.Add(new DateTimeAxis { Position = AxisPosition.Bottom, Minimum = minValue, Maximum = maxValue, StringFormat = "d/M/yy " });


        //        plot.Series.Add(lineSerie);

        //    }
        //    catch (Exception ex)
        //    {
        //        MessageBox.Show(ex.Message, "PlotModel Error");
        //    }
        //    return plot;
        //}

        //private void Button_Click(object sender, RoutedEventArgs e)
        //{
        //    this.Close();
        //}
       
       

        //private void Button_Click_Imprimer(object sender, RoutedEventArgs e)
        //{

            
        //    try
        //    {
        //        var exporter = new XpsExporter { Width = 800, Height = 600 };
        //        var select = (TAB.SelectedItem as TabItem).Header.ToString();
        //        switch(select)
        //        {
        //            case"CO":
        //                PlotModel model = CourbeCO();
        //                exporter.Print(model);
        //                break;
        //            case "CO2":
        //                PlotModel model1 = CourbeCO2();
        //                exporter.Print(model1);
        //                break;
        //            case "Luminosité":
        //                PlotModel model2 = CourbeLUX(); 
        //                    exporter.Print(model2);
        //                break;
        //            case "Température":
        //                PlotModel model3 = CourbeTEM();        
        //                exporter.Print(model3);
        //                break;
        //            case "Humidité au sol":
        //                IPlotModel model4 = CourbeLP();
        //                exporter.Print(model4);
        //                break;
        //            case "Pression ambiante":
        //                IPlotModel model5 = CourbePRES();
        //                exporter.Print(model5);
        //                break;
        //            case "Humidité relative":
        //                IPlotModel model6 = CourbeHUM();
        //                exporter.Print(model6);
        //                break;
        //        }
                   
                
        //    }
        //    catch(Exception ex)
        //    {
        //        MessageBox.Show(ex.Message);
        //    }
               

        //}










// Batterie

<Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Viewbox Grid.Column="0" Width="40" Height="80" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="10,10,0,0">
                <StackPanel Orientation="Vertical">
                    <Border Background="Black" CornerRadius="2,2,0,0" Padding="2" Width="20" Height="7" Margin="0,-2,0,-2"/>
                    <Border BorderBrush="Black" BorderThickness="2" CornerRadius="5" Padding="2" Width="50" Height="100">
                        <Grid Margin="0,-14,0,0">
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="{Binding Pourcentage_SS}" />
                            </Grid.RowDefinitions>
                            <Border Grid.Row="1" Background="Black" CornerRadius="2" Padding="2" Margin="0,8,0,0" />
                        </Grid>
                    </Border>
                </StackPanel>
            </Viewbox>
            <Viewbox Grid.Column="1" Width="40" Height="80" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="10,10,0,0">
                <StackPanel Orientation="Vertical">
                    <Border Background="Black" CornerRadius="2,2,0,0" Padding="2" Width="20" Height="7" Margin="0,-2,0,-2"/>
                    <Border BorderBrush="Black" BorderThickness="2" CornerRadius="5" Padding="2" Width="50" Height="100">
                        <Grid  Margin="0,-14,0,0">
                            <Grid.RowDefinitions>
                                <RowDefinition />
                                <RowDefinition Height="{Binding Pourcentage_SCP}" />
                            </Grid.RowDefinitions>
                            <Border Grid.Row="1" Background="Black" CornerRadius="2" Padding="2" Margin="0,8,0,0" />
                        </Grid>
                    </Border>
                </StackPanel>
            </Viewbox>
            <TextBlock Grid.Column="0" TextAlignment="Center" VerticalAlignment="Center" Margin="0,60,0,0" Text="{Binding Pourcentage_SS,StringFormat='Boitier SS: {0} %'}"></TextBlock>
            <TextBlock Grid.Column="1" TextAlignment="Center" VerticalAlignment="Center" Margin="0,60,0,0" Text="{Binding Pourcentage_SCP,StringFormat='Boitier SCP: {0} %'}"></TextBlock>
        </Grid>


    //Activer/Désactiver l'alarme

    <Grid Grid.Column="1" Grid.Row="1" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
                <ColumnDefinition Width="*"></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
            </Grid.RowDefinitions>
            <Border BorderBrush="Black" BorderThickness="3"  Grid.RowSpan="5" Grid.ColumnSpan="4" CornerRadius="10" Margin="8,0,8,0"></Border>
            <Label Grid.Row="1" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" >Capteur CO</Label>
            <ui:ToggleSwitch Grid.Row="1" Grid.Column="1"  VerticalAlignment="Center"></ui:ToggleSwitch>
            <Label Grid.Row="2" Grid.Column="0"  HorizontalAlignment="Center" VerticalAlignment="Center">Capteur CO2</Label>
            <ui:ToggleSwitch Grid.Row="2" Grid.Column="1" VerticalAlignment="Center"></ui:ToggleSwitch>
            <Label Grid.Row="3" Grid.Column="0"  HorizontalAlignment="Center" VerticalAlignment="Center">Humidité au sol</Label>
            <ui:ToggleSwitch Grid.Row="3" Grid.Column="1" VerticalAlignment="Center"></ui:ToggleSwitch>
            <Label Grid.Row="4" Grid.Column="0"  HorizontalAlignment="Center" VerticalAlignment="Center">Luminosité</Label>
            <ui:ToggleSwitch Grid.Row="4" Grid.Column="1" VerticalAlignment="Center"></ui:ToggleSwitch>
            <Label Grid.Row="1" Grid.Column="2"  HorizontalAlignment="Center" VerticalAlignment="Center">Température</Label>
            <ui:ToggleSwitch Grid.Row="1" Grid.Column="3" VerticalAlignment="Center"></ui:ToggleSwitch>
            <Label Grid.Row="2" Grid.Column="2"  HorizontalAlignment="Center" VerticalAlignment="Center">Humidité</Label>
            <ui:ToggleSwitch Grid.Row="2" Grid.Column="3" VerticalAlignment="Center"></ui:ToggleSwitch>
            <Label Grid.Row="3" Grid.Column="2"  HorizontalAlignment="Center" VerticalAlignment="Center">Pression</Label>
            <ui:ToggleSwitch Grid.Row="3" Grid.Column="3" VerticalAlignment="Center"></ui:ToggleSwitch>
            <Label Grid.Row="4" Grid.Column="2"  HorizontalAlignment="Center" VerticalAlignment="Center">Batterie</Label>
            <ui:ToggleSwitch Grid.Row="4" Grid.Column="3" VerticalAlignment="Center"></ui:ToggleSwitch>
            <Label Grid.Column="1" Grid.ColumnSpan="2" HorizontalAlignment="Center" VerticalAlignment="Center" >Activer/Désactiver l'alarme</Label>
        </Grid>